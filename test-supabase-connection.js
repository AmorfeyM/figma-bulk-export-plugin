#!/usr/bin/env node
// –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase –∏ –¥–µ–ø–ª–æ—è —Ñ—É–Ω–∫—Ü–∏–π

const https = require('https');
const fs = require('fs');

// –û–ë–ù–û–í–ò–¢–ï –≠–¢–ò –î–ê–ù–ù–´–ï –° –í–ê–®–ò–ú–ò –†–ï–ê–õ–¨–ù–´–ú–ò –ó–ù–ê–ß–ï–ù–ò–Ø–ú–ò
const SUPABASE_CONFIG = {
  PROJECT_URL: 'https://your-project-id.supabase.co', // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à URL
  ANON_KEY: 'your_anon_key_here', // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à anon key
  SERVICE_ROLE_KEY: 'your_service_role_key_here' // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à service role key
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
function makeRequest(url, options = {}) {
  return new Promise((resolve, reject) => {
    const req = https.request(url, options, (res) => {
      let data = '';
      res.on('data', chunk => data += chunk);
      res.on('end', () => {
        try {
          const jsonData = data ? JSON.parse(data) : {};
          resolve({ status: res.statusCode, data: jsonData, headers: res.headers });
        } catch (e) {
          resolve({ status: res.statusCode, data: data, headers: res.headers });
        }
      });
    });

    req.on('error', reject);

    if (options.body) {
      req.write(options.body);
    }

    req.end();
  });
}

// 1. –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase
async function testBasicConnection() {
  console.log('üîó –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase...');

  try {
    const response = await makeRequest(SUPABASE_CONFIG.PROJECT_URL + '/rest/v1/', {
      method: 'HEAD',
      headers: {
        'apikey': SUPABASE_CONFIG.ANON_KEY,
        'Authorization': `Bearer ${SUPABASE_CONFIG.ANON_KEY}`
      }
    });

    if (response.status === 200) {
      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —É—Å–ø–µ—à–Ω–æ!');
      return true;
    } else {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${response.status}`);
      return false;
    }
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ${error.message}`);
    return false;
  }
}

// 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü
async function checkTables() {
  console.log('üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É subscriptions
    const response = await makeRequest(SUPABASE_CONFIG.PROJECT_URL + '/rest/v1/subscriptions?select=id&limit=1', {
      method: 'GET',
      headers: {
        'apikey': SUPABASE_CONFIG.ANON_KEY,
        'Authorization': `Bearer ${SUPABASE_CONFIG.ANON_KEY}`,
        'Content-Type': 'application/json'
      }
    });

    if (response.status === 200) {
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ subscriptions –Ω–∞–π–¥–µ–Ω–∞');
      console.log(`üìä –î–∞–Ω–Ω—ã–µ: ${JSON.stringify(response.data)}`);
      return true;
    } else {
      console.log(`‚ùå –¢–∞–±–ª–∏—Ü–∞ subscriptions –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${response.status}`);
      console.log(`üìÑ –û—Ç–≤–µ—Ç: ${JSON.stringify(response.data)}`);
      return false;
    }
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü: ${error.message}`);
    return false;
  }
}

// 3. –¢–µ—Å—Ç Edge Function (–µ—Å–ª–∏ –∑–∞–¥–µ–ø–ª–æ–µ–Ω–∞)
async function testEdgeFunction() {
  console.log('‚ö° –¢–µ—Å—Ç–∏—Ä—É–µ–º Edge Function verify-subscription...');

  try {
    const testData = {
      email: 'test@demo.com',
      license_key: 'TEST-123456-DEMO',
      device_fingerprint: 'test-device-123'
    };

    const response = await makeRequest(SUPABASE_CONFIG.PROJECT_URL + '/functions/v1/verify-subscription', {
      method: 'POST',
      headers: {
        'apikey': SUPABASE_CONFIG.ANON_KEY,
        'Authorization': `Bearer ${SUPABASE_CONFIG.ANON_KEY}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(testData)
    });

    console.log(`üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.status}`);
    console.log(`üìÑ –î–∞–Ω–Ω—ã–µ: ${JSON.stringify(response.data, null, 2)}`);

    if (response.status === 200 || response.status === 404) {
      console.log('‚úÖ Edge Function –¥–æ—Å—Ç—É–ø–Ω–∞');
      return true;
    } else {
      console.log('‚ö†Ô∏è Edge Function –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –∑–∞–¥–µ–ø–ª–æ–µ–Ω–∞');
      return false;
    }
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Edge Function: ${error.message}`);
    return false;
  }
}

// 4. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
async function createTestSubscription() {
  console.log('üîß –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É...');

  try {
    const testSubscription = {
      email: 'test@demo.com',
      license_key: 'TEST-' + Date.now().toString().slice(-6) + '-DEMO',
      status: 'active',
      plan: 'monthly',
      expires_at: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString()
    };

    const response = await makeRequest(SUPABASE_CONFIG.PROJECT_URL + '/rest/v1/subscriptions', {
      method: 'POST',
      headers: {
        'apikey': SUPABASE_CONFIG.SERVICE_ROLE_KEY,
        'Authorization': `Bearer ${SUPABASE_CONFIG.SERVICE_ROLE_KEY}`,
        'Content-Type': 'application/json',
        'Prefer': 'return=representation'
      },
      body: JSON.stringify(testSubscription)
    });

    if (response.status === 201) {
      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!');
      console.log(`üìß Email: ${testSubscription.email}`);
      console.log(`üîë –ö–ª—é—á: ${testSubscription.license_key}`);
      console.log(`üìÑ –î–∞–Ω–Ω—ã–µ: ${JSON.stringify(response.data, null, 2)}`);
      return testSubscription;
    } else {
      console.log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: ${response.status}`);
      console.log(`üìÑ –û—Ç–≤–µ—Ç: ${JSON.stringify(response.data)}`);
      return null;
    }
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏: ${error.message}`);
    return null;
  }
}

// 5. –î–µ–ø–ª–æ–π Edge Functions (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±)
function generateEdgeFunctionSQL() {
  console.log('üìù –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º SQL –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Edge Functions...');

  const sql = `
-- –°–æ–∑–¥–∞–Ω–∏–µ Edge Function –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
-- –í—ã–ø–æ–ª–Ω–∏—Ç–µ —ç—Ç–æ—Ç SQL –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ Supabase

-- 1. –í–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
CREATE EXTENSION IF NOT EXISTS "http" SCHEMA extensions;

-- 2. –°–æ–∑–¥–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ Edge Function)
CREATE OR REPLACE FUNCTION verify_subscription(
  p_email TEXT,
  p_license_key TEXT,
  p_device_fingerprint TEXT
)
RETURNS JSON
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
  subscription_record RECORD;
  result JSON;
BEGIN
  -- –ü–æ–∏—Å–∫ –ø–æ–¥–ø–∏—Å–∫–∏
  SELECT * INTO subscription_record
  FROM subscriptions
  WHERE email = LOWER(p_email)
    AND license_key = p_license_key;

  -- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è
  IF NOT FOUND THEN
    RETURN json_build_object(
      'valid', false,
      'error', '–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
    );
  END IF;

  -- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è
  IF subscription_record.expires_at < NOW() THEN
    RETURN json_build_object(
      'valid', false,
      'error', '–ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞',
      'expired', true
    );
  END IF;

  -- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
  IF subscription_record.status != 'active' THEN
    RETURN json_build_object(
      'valid', false,
      'error', '–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞'
    );
  END IF;

  -- –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
  IF subscription_record.device_fingerprint IS NOT NULL
     AND subscription_record.device_fingerprint != p_device_fingerprint THEN
    RETURN json_build_object(
      'valid', false,
      'error', '–õ–∏—Ü–µ–Ω–∑–∏—è –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ –¥—Ä—É–≥–æ–º—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É'
    );
  END IF;

  -- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ fingerprint –µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
  IF subscription_record.device_fingerprint IS NULL THEN
    UPDATE subscriptions
    SET device_fingerprint = p_device_fingerprint,
        last_checked = NOW()
    WHERE id = subscription_record.id;
  ELSE
    UPDATE subscriptions
    SET last_checked = NOW()
    WHERE id = subscription_record.id;
  END IF;

  -- –£—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  RETURN json_build_object(
    'valid', true,
    'expires', subscription_record.expires_at,
    'plan', subscription_record.plan,
    'status', subscription_record.status
  );
END;
$$;

-- 3. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ RLS
ALTER FUNCTION verify_subscription OWNER TO supabase_admin;
GRANT EXECUTE ON FUNCTION verify_subscription TO anon, authenticated;
`;

  fs.writeFileSync('supabase-functions.sql', sql);
  console.log('‚úÖ SQL —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: supabase-functions.sql');
  console.log('üìã –í—ã–ø–æ–ª–Ω–∏—Ç–µ —ç—Ç–æ—Ç SQL –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ Supabase –¥–ª—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ API');
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function main() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥–ø–∏—Å–∫–∏ Figma Plugin\n');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
  if (SUPABASE_CONFIG.PROJECT_URL.includes('your-project-id')) {
    console.log('‚ùå –û–®–ò–ë–ö–ê: –û–±–Ω–æ–≤–∏—Ç–µ SUPABASE_CONFIG —Å –≤–∞—à–∏–º–∏ —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏!');
    console.log('üìù –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª test-supabase-connection.js –∏ –∑–∞–º–µ–Ω–∏—Ç–µ:');
    console.log('   - PROJECT_URL: –≤–∞—à Supabase URL');
    console.log('   - ANON_KEY: –≤–∞—à anon public key');
    console.log('   - SERVICE_ROLE_KEY: –≤–∞—à service role key\n');
    return;
  }

  console.log(`üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:`);
  console.log(`   URL: ${SUPABASE_CONFIG.PROJECT_URL}`);
  console.log(`   Key: ${SUPABASE_CONFIG.ANON_KEY.substring(0, 20)}...\n`);

  // –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç—ã
  const basicConnection = await testBasicConnection();
  console.log('');

  if (basicConnection) {
    const tablesExist = await checkTables();
    console.log('');

    if (tablesExist) {
      const testSub = await createTestSubscription();
      console.log('');

      await testEdgeFunction();
      console.log('');

      if (testSub) {
        console.log('üéâ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!');
        console.log(`üìß –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${testSub.email}`);
        console.log(`üîë –õ–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–π –∫–ª—é—á: ${testSub.license_key}`);
      }
    } else {
      console.log('üìã –í—ã–ø–æ–ª–Ω–∏—Ç–µ SQL –∏–∑ —Ñ–∞–π–ª–∞ supabase-setup.md –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü');
    }
  }

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π SQL
  generateEdgeFunctionSQL();

  console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
}

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
  main().catch(console.error);
}

module.exports = { testBasicConnection, checkTables, createTestSubscription };
